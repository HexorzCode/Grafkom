import pygame
from pygame.locals import *
from OpenGL.GL import *
from OpenGL.GLU import *
import numpy as np


print("Press S to Save the 3D text object to an OBJ file.")

TEXT_TO_RENDER = input("Enter the text to render in 3D: ") or "Hello, World!"
FONT_SIZE = 64
VOXEL_SIZE = 0.1
EXTRUSION_DEPTH = 0.5

rotation_x = 0.0
rotation_y = 0.0
zoom = -10.0
mouse_down = False
last_mouse_x, last_mouse_y = 0, 0


def init_opengl(width, height):
    glClearColor(0.2, 0.2, 0.3, 1.0)
    glClearDepth(1.0)
    glEnable(GL_DEPTH_TEST)
    glDepthFunc(GL_LEQUAL)

    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    gluPerspective(45, (width / height), 0.1, 100.0)

    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()

    glEnable(GL_LIGHTING)
    glEnable(GL_LIGHT0)
    glLightfv(GL_LIGHT0, GL_POSITION, [0.0, 0.0, 1.0, 0.0])
    glLightfv(GL_LIGHT0, GL_DIFFUSE, [0.8, 0.8, 0.8, 1.0])
    glLightfv(GL_LIGHT0, GL_AMBIENT, [0.2, 0.2, 0.2, 1.0])
    glEnable(GL_COLOR_MATERIAL)


def get_font_pixels(text, font_size):
    pygame.font.init()
    font = pygame.font.SysFont(None, font_size)
    text_surface = font.render(text, True, (255, 255, 255, 255))

    width, height = text_surface.get_width(), text_surface.get_height()
    alpha_map = np.zeros((height, width), dtype=np.uint8)
    for y in range(height):
        for x in range(width):
            alpha_map[y, x] = text_surface.get_at((x, y))[3]

    pygame.font.quit()
    return alpha_map


def create_cube_vertices(x_pos, y_pos, z_pos, size, depth):
    half_size = size / 2.0
    half_depth = depth / 2.0

    v0 = (x_pos - half_size, y_pos - half_size, z_pos + half_depth)
    v1 = (x_pos + half_size, y_pos - half_size, z_pos + half_depth)
    v2 = (x_pos + half_size, y_pos + half_size, z_pos + half_depth)
    v3 = (x_pos - half_size, y_pos + half_size, z_pos + half_depth)

    v4 = (x_pos - half_size, y_pos - half_size, z_pos - half_depth)
    v5 = (x_pos + half_size, y_pos - half_size, z_pos - half_depth)
    v6 = (x_pos + half_size, y_pos + half_size, z_pos - half_depth)
    v7 = (x_pos - half_size, y_pos + half_size, z_pos - half_depth)

    faces = [
        (0, 1, 2, 3),
        (1, 5, 6, 2),
        (5, 4, 7, 6),
        (4, 0, 3, 7),
        (3, 2, 6, 7),
        (4, 5, 1, 0)
    ]

    normals = [
        (0.0, 0.0, 1.0),
        (1.0, 0.0, 0.0),
        (0.0, 0.0, -1.0),
        (-1.0, 0.0, 0.0),
        (0.0, 1.0, 0.0),
        (0.0, -1.0, 0.0)
    ]

    vertices_list = [v0, v1, v2, v3, v4, v5, v6, v7]

    return vertices_list, faces, normals


def generate_3d_text_geometry(text, font_size, voxel_size, extrusion_depth):
    alpha_map = get_font_pixels(text, font_size)
    height, width = alpha_map.shape

    center_x_offset = (width * voxel_size) / 2.0
    center_y_offset = (height * voxel_size) / 2.0

    all_vertices = []
    all_faces = []
    all_face_normals = []

    vertex_offset = 0

    for y in range(height):
        for x in range(width):
            if alpha_map[y, x] > 128:
                x_pos = (x * voxel_size) - center_x_offset
                y_pos = (height - 1 - y) * voxel_size - center_y_offset
                z_pos = 0.0

                cube_verts, cube_faces, cube_normals = create_cube_vertices(
                    x_pos, y_pos, z_pos, voxel_size, extrusion_depth
                )

                all_vertices.extend(cube_verts)

                for i, face in enumerate(cube_faces):
                    all_faces.append(
                        tuple(idx + vertex_offset for idx in face))
                    all_face_normals.append(cube_normals[i])

                vertex_offset += len(cube_verts)

    return all_vertices, all_faces, all_face_normals


def draw_text_object(vertices, faces, normals, color=(0.8, 0.5, 0.2)):
    glColor3f(color[0], color[1], color[2])

    glBegin(GL_QUADS)
    for i, face in enumerate(faces):
        glNormal3fv(normals[i])
        for vertex_index in face:
            glVertex3fv(vertices[vertex_index])
    glEnd()


def save_to_obj(filename, vertices, faces, face_normals):
    try:
        with open(filename, 'w') as f:
            f.write(
                f"# OBJ file generated by 3D Text Generator for text: \"{TEXT_TO_RENDER}\"\n")
            f.write(
                f"o {TEXT_TO_RENDER.replace(' ', '_').replace('.', '').replace(',', '')}_text\n")

            for v in vertices:
                f.write(f"v {v[0]:.6f} {v[1]:.6f} {v[2]:.6f}\n")

            unique_normals = []
            normal_map = {}
            for normal_tuple in face_normals:
                if normal_tuple not in normal_map:
                    unique_normals.append(normal_tuple)
                    normal_map[normal_tuple] = len(unique_normals)

            for n in unique_normals:
                f.write(f"vn {n[0]:.6f} {n[1]:.6f} {n[2]:.6f}\n")

            for i, face in enumerate(faces):
                normal_idx = normal_map[face_normals[i]]

                f.write("f")
                for v_idx in face:
                    f.write(f" {v_idx + 1}//{normal_idx}")
                f.write("\n")
        print(f"3D text object saved to {filename}")
    except IOError as e:
        print(f"Error saving OBJ file: {e}")


def main():
    global rotation_x, rotation_y, zoom, mouse_down, last_mouse_x, last_mouse_y

    pygame.init()
    display = (800, 600)
    pygame.display.set_mode(display, DOUBLEBUF | OPENGL | RESIZABLE)
    pygame.display.set_caption("3D Text Generator")

    init_opengl(*display)

    text_vertices, text_faces, text_face_normals = generate_3d_text_geometry(
        TEXT_TO_RENDER, FONT_SIZE, VOXEL_SIZE, EXTRUSION_DEPTH
    )

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    running = False
                elif event.key == K_s:
                    default_obj_filename = f"{TEXT_TO_RENDER.replace(' ', '_').lower()}.obj"
                    save_to_obj(default_obj_filename, text_vertices,
                                text_faces, text_face_normals)
            elif event.type == MOUSEBUTTONDOWN:
                if event.button == 1:
                    mouse_down = True
                    last_mouse_x, last_mouse_y = event.pos
                elif event.button == 4:
                    zoom += 1.0
                elif event.button == 5:
                    zoom -= 1.0
            elif event.type == MOUSEBUTTONUP:
                if event.button == 1:
                    mouse_down = False
            elif event.type == MOUSEMOTION:
                if mouse_down:
                    current_mouse_x, current_mouse_y = event.pos
                    dx = current_mouse_x - last_mouse_x
                    dy = current_mouse_y - last_mouse_y
                    rotation_y += dx * 0.5
                    rotation_x += dy * 0.5
                    last_mouse_x, last_mouse_y = current_mouse_x, current_mouse_y
            elif event.type == VIDEORESIZE:
                glViewport(0, 0, event.w, event.h)
                glMatrixMode(GL_PROJECTION)
                glLoadIdentity()
                gluPerspective(45, (event.w / event.h), 0.1, 100.0)
                glMatrixMode(GL_MODELVIEW)

        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        glLoadIdentity()

        glTranslatef(0.0, 0.0, zoom)
        glRotatef(rotation_x, 1, 0, 0)
        glRotatef(rotation_y, 0, 1, 0)

        draw_text_object(text_vertices, text_faces,
                         text_face_normals, color=(0.8, 0.5, 0.2))

        pygame.display.flip()
        pygame.time.wait(10)

    pygame.quit()


if __name__ == "__main__":
    main()
